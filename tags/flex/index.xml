<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>flex on Core Dumps</title>
    <link>https://amitab.github.io/tags/flex/</link>
    <description>Recent content in flex on Core Dumps</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>adas59@asu.edu (Amitabh Das)</managingEditor>
    <webMaster>adas59@asu.edu (Amitabh Das)</webMaster>
    <lastBuildDate>Mon, 26 Oct 2015 18:00:00 +0730</lastBuildDate><atom:link href="https://amitab.github.io/tags/flex/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Line up all the things!</title>
      <link>https://amitab.github.io/post/line-it-up/</link>
      <pubDate>Mon, 26 Oct 2015 18:00:00 +0730</pubDate>
      <author>adas59@asu.edu (Amitabh Das)</author>
      <guid>https://amitab.github.io/post/line-it-up/</guid>
      <description>If you are a Web Designer, at least once in your life, you must have come across a situation where you needed to line up elements side by side, or tried to understand why each element behaves the way it does while lining them up. Here are a list of various ways to achieve this goal.
Float .container {} .container .items { float: left; } .container .clarity { clear: both; } Oldest solution in the book.</description>
    </item>
    
  </channel>
</rss>
